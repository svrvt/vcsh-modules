# MAYBE: (from merged upstream/master) # NOTE: this file is sourced, not executed: #!/usr/bin/env bash

f_vcsh_gitmodules_is_vcsh_gm_sourcedir()
{
    l_vcsh_isgmsd_pathbasedir="$1" \
        && shift \
        && [ -n "${l_vcsh_isgmsd_pathbasedir}" ] \
        || return 1

    for l_vcsh_isgmsd_pathpost in \
        config \
        git-submodule \
        # end
    do
        [ -n "${l_vcsh_isgmsd_pathpost}" ] || continue
        l_vcsh_isgmsd_pathchk="${l_vcsh_isgmsd_pathbasedir}/${l_vcsh_isgmsd_pathpost}" \
            && [ -n "${l_vcsh_isgmsd_pathchk}" -a -e "${l_vcsh_isgmsd_pathchk}" ] \
            || return 1
    done
    return 0
}

# args: [OWN_OPTIONS] [--] [GIT_ARGUMENTS]
#  OWN_OPTIONS:
#   --capture-stdout : output variable: g_gitcmd_out_stdout
f_vcsh_gitmodules_run_git()
{
    unset \
        g_gitcmd_out_stdout \
        \
        l_vcsh_gitmodules_run_git_captstdout_flag \
        # end
    l_vcsh_gitmodules_run_git_rc=0

    if [ ${l_vcsh_gitmodules_run_git_rc} -eq 0 ] ; then
        while [ $# -gt 0 ]
        do
            l_vcsh_gitmodules_run_git_arg="$1"
            case "${l_vcsh_gitmodules_run_git_arg}" in
                --capture-stdout )
                    l_vcsh_gitmodules_run_git_captstdout_flag=x ;;
                -- )
                    shift
                    break ;;
                * )
                    break ;;
            esac
            shift
        done
    fi

    if [ ${l_vcsh_gitmodules_run_git_rc} -eq 0 ] ; then
        # for now, we run 'git', and not support any variable-based overrides.
        l_vcsh_gitmodules_run_git_gitcmd='git'
    fi

    if [ ${l_vcsh_gitmodules_run_git_rc} -eq 0 ] ; then
        if [ -n "${l_vcsh_gitmodules_run_git_captstdout_flag}" ] ; then
            g_gitcmd_out_stdout=`"${l_vcsh_gitmodules_run_git_gitcmd}" "$@"` \
                || {
                    l_vcsh_gitmodules_run_git_rc=$?
                    unset g_gitcmd_out_stdout
                }
        else
            # no redirections: caller will do that, if it wants.
            "${l_vcsh_gitmodules_run_git_gitcmd}" "$@" \
                || l_vcsh_gitmodules_run_git_rc=$?
        fi
    fi

    unset \
        l_vcsh_gitmodules_run_git_arg \
        l_vcsh_gitmodules_run_git_captstdout_flag \
        l_vcsh_gitmodules_run_git_gitcmd \
        # end
    return ${l_vcsh_gitmodules_run_git_rc}
}

if [ ! -f .gitmodules ]; then
    EXEC_PATH="`git --exec-path`" \
        && [ -n "${EXEC_PATH}" ] \
        || return 1

    : "${GIT_EXEC_PATH_ORIG:=${EXEC_PATH}}" \
        && [ -n "${GIT_EXEC_PATH_ORIG}" ] \
        && export GIT_EXEC_PATH_ORIG \
        || return 1

    : "${GIT_EXEC_PATH_DEFDIR:=${GIT_EXEC_PATH_ORIG##*:}}" \
        && [ -n "${GIT_EXEC_PATH_DEFDIR}" -a -d "${GIT_EXEC_PATH_DEFDIR}/" ] \
        && [ -x "${GIT_EXEC_PATH_DEFDIR}/git-submodule" ] \
        && export GIT_EXEC_PATH_DEFDIR \
        || return 1

    if [ -z "${VCSH_MODULES_SOURCEPATH}" ] ; then
        for t_dirname in \
            ${BASH_SOURCE:+"${BASH_SOURCE%/*}"} \
            ${XDG_CONFIG_HOME:+"${XDG_CONFIG_HOME}/vcsh/gitmodules"} \
            ${VCSH_BASE:+"${VCSH_BASE}/.config/vcsh/gitmodules"} \
            # end
        do
            [ -n "${t_dirname}" ] \
                && f_vcsh_gitmodules_is_vcsh_gm_sourcedir "${t_dirname}" \
                || continue

            VCSH_MODULES_SOURCEPATH="${t_dirname}"
            break
        done
        unset t_dirname
    else
        f_vcsh_gitmodules_is_vcsh_gm_sourcedir "${VCSH_MODULES_SOURCEPATH}" \
            || return 1
    fi
    [ -n "${VCSH_MODULES_SOURCEPATH}" ] \
        && export VCSH_MODULES_SOURCEPATH \
        || return 1

    case ":{begin}:${EXEC_PATH}:{end}:" in
        # matches anywhere: "*:${VCSH_MODULES_SOURCEPATH}:*" )
        # matches only when it's the first:
        ":{begin}:${VCSH_MODULES_SOURCEPATH}:*" )
            : ;;
        * )
            GIT_EXEC_PATH="${VCSH_MODULES_SOURCEPATH}:${EXEC_PATH}"
            export GIT_EXEC_PATH
            ;;
    esac

    VCSH_MODULES_PATH="${VCSH_MODULES_PATH:-${VCSH_BASE:-$HOME}/.gitmodules.d}" \
        && [ -n "${VCSH_MODULES_PATH}" ] \
        && export VCSH_MODULES_PATH \
        || return 1
    [ -d "${VCSH_MODULES_PATH}/" ] || mkdir -p "${VCSH_MODULES_PATH}" \
        || return 1
fi

# vim600: set filetype=sh fileformat=unix softtabstop=4:
# vim: set expandtab smarttab:
# vi: set autoindent shiftwidth=4:
